import os
import pandas as pd
import numpy as np
import pybigtools
from collections import defaultdict

configfile: "config.yaml"

METADATA = pd.read_csv(config.get('metadata_file', 'metadata.tsv'), sep='\t')
OUTPUT_DIR = config.get('output_dir', 'results')

def get_direction(row):
    """Determine direction based on output_type and assay"""
    output_type = row['output_type']
    
    if output_type == 'minus strand signal of unique reads':
        return 'reverse'
    elif output_type == 'plus strand signal of unique reads':
        return 'forward'
    elif output_type == 'signal of unique reads' and row['assay'] == 'RNA-seq':
        return 'all'
    return None

BIGWIG_METADATA = METADATA[METADATA['file_format'] == 'bigWig'].copy()
BIGWIG_METADATA["direction"] = BIGWIG_METADATA.apply(get_direction, axis=1)

FILTERED_METADATA = BIGWIG_METADATA[
    (BIGWIG_METADATA['direction'].notna()) & 
    (BIGWIG_METADATA['assay'] != 'long read RNA-seq')
].copy()

main_chromosomes = config.get('main_chromosomes', ['chr' + str(i) for i in range(1, 23)])

rule all:
    input:
        expand(
            os.path.join(OUTPUT_DIR, 'bigwig', '{acc}.bw'),
            zip,
            acc=BIGWIG_METADATA['acc']
        ),
        expand(
            os.path.join(OUTPUT_DIR, 'log10_transformed', '{acc}.bw'),
            acc=FILTERED_METADATA['acc']
        ),
        expand(
            os.path.join(OUTPUT_DIR, 'aggregated', 'RNA-seq.{direction}.bw'),
            direction=['forward', 'reverse', 'all']
        ),
        expand(
            os.path.join(OUTPUT_DIR, 'aggregated', '{assay}.{direction}.bw'),
            assay=['RAMPAGE', 'CAGE', 'PRO-cap', 'Bru-seq', 'BruUV-seq', 'BruChase-seq'],
            direction=['forward', 'reverse']
        )

rule download_bigwig:
    output:
        bw = os.path.join(OUTPUT_DIR, 'bigwig', '{acc}.bw')
    params:
        url = lambda wildcards: BIGWIG_METADATA[BIGWIG_METADATA['acc'] == wildcards.acc]['url'].iloc[0]
    shell:
        """
        wget -O {output.bw} "{params.url}"
        """

rule log10_transform_bigwig:
    input:
        bw = os.path.join(OUTPUT_DIR, 'bigwig', '{acc}.bw')
    output:
        transformed_bw = os.path.join(OUTPUT_DIR, 'log10_transformed', '{acc}.bw')
    resources:
        mem_mb = 32768
    run:
        bw_in = pybigtools.open(input.bw)
        chrom_sizes = dict(bw_in.chroms().items())
        chrom_sizes = {k: v for k, v in chrom_sizes.items() if k in main_chromosomes}
        
        transformed_values = []

        for chrom, size in chrom_sizes.items():
            records = list(bw_in.records(chrom, 0, size))
            
            for start, end, value in records:
                transformed_value = np.log10(abs(value) + 1)
                transformed_values.append((chrom, start, end, transformed_value))

        bw_out = pybigtools.open(output.transformed_bw, 'w')
        bw_out.write(chrom_sizes, transformed_values)

rule aggregate_bigwig_by_assay_direction:
    input:
        bw_files = lambda wildcards: [
            os.path.join(OUTPUT_DIR, 'log10_transformed', f"{acc}.bw")
            for acc in FILTERED_METADATA[
                (FILTERED_METADATA['assay'] == wildcards.assay) & 
                (FILTERED_METADATA['direction'] == wildcards.direction)
            ]['acc']
        ]
    output:
        aggregated_bw = os.path.join(OUTPUT_DIR, 'aggregated', '{assay}.{direction}.bw')
    params:
        file_list = lambda wildcards, input: " ".join(input.bw_files),
        file_count = lambda wildcards, input: len(input.bw_files),
        temp_bg = lambda wildcards: f"{wildcards.assay}.{wildcards.direction}.bg.tmp",
        temp_bg_avg = lambda wildcards: f"{wildcards.assay}.{wildcards.direction}.bg.avg.tmp",
        genome_sizes = config['genome_sizes']
    resources:
        mem_mb = 32768
    shell:
        """
        bigWigMerge {params.file_list} {params.temp_bg}
        awk -v count="{params.file_count}" '{{print $1 "\t" $2 "\t" $3 "\t" $4/count}}' {params.temp_bg} > {params.temp_bg_avg}
        bedGraphToBigWig {params.temp_bg_avg} {params.genome_sizes} {output.aggregated_bw}
        rm {params.temp_bg} {params.temp_bg_avg}
        """